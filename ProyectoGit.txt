| Comando                        | Para qu√© sirve (resumen)                                                                    |
| ------------------------------ | ------------------------------------------------------------------------------------------- |
| `git config`                   | Configurar nombre/email de autor, alias personalizados, colores, editor, etc.               |
| `git init`                     | Crear un nuevo repositorio Git en la carpeta actual.                                        |
| `git clone [URL]`              | Copiar un repositorio remoto a tu m√°quina local (precarga `.git`).                          |
| `git status`                   | Mostrar archivos modificados, sin trackear o listos para commit.                            |
| `git add <archivo>‚Ä¶`           | A√±adir cambios al ‚Äústaging area‚Äù para el pr√≥ximo commit.                                    |
| `git commit -m "‚Ä¶" `           | Guardar los cambios a√±adidos como una nueva instant√°nea de tu proyecto.                     |
| `git log`                      | Ver el historial de commits de la rama actual.                                              |
| `git diff`                     | Comparar cambios en archivos no a√±adidos (staged o unstaged).                               |
| `git checkout <rama>`          | Moverse entre ramas o cambiar de versi√≥n de un archivo (versi√≥n + HEAD).                    |
| `git reset <archivo>`          | Quitar un archivo del √°rea de staging, sin alterar su contenido.                            |
| `git reset --hard <commit>`    | Volver al commit indicado, descartando todo lo no comiteado.                                |
| `git reflog`                   | Registro de movimientos recientes de HEAD (perfecto para "deshacer" resets).                |
| `git branch [rama]`            | Crear, listar o eliminar ramas locales (con `-d <rama>` borra una rama).                    |
| `git switch <rama>`            | Cambiar de rama sin usar el verbo antiguo ("checkout").                                     |
| `git merge <rama>`             | Fusionar otra rama dentro de la rama activa (integraci√≥n de cambios).                       |
| `git stash`                    | Guardar temporalmente cambios no comiteados (√∫til antes de cambiar de rama).                |
| `git stash list / pop / drop`  | Ver, aplicar o descartar cambios guardados en la pila de `stash`.                           |
| `git tag [‚Äìa] <nombre>`        | Marcar un punto espec√≠fico del historial como versi√≥n o referencia puntual.                 |
| `git fetch [remote]`           | Descargar historial remoto sin mezclarlo a la rama actual.                                  |
| `git pull`                     | Sincronizar el repositorio local con remoto (fetch + merge).                                |
| `git push [remote] [rama]`     | Enviar commits locales a la rama correspondiente en el remoto.                              |
| `git remote add/rename/origin` | Asociar o renombrar la URL de un repositorio remoto local.                                  |
| `git cherry-pick <SHA>`        | Aplicar un commit concreto (SHA) desde otra rama a la rama actual.                          |
| `git rebase <rama>`            | Mover autom√°ticamente tus commits en la l√≠nea temporal de otra rama (m√°s limpio que merge). |
| `git alias ...`                | Crear atajos personalizados para comandos complejos como `lg = log --oneline --graph`.      |

‚öôÔ∏è Otras utilidades del curso:

* **`.gitignore`**: archivo que indica qu√© archivos o carpetas deben ser ignorados por Git.
* **Alias √∫tiles**: permite atajos como `git co` para `git checkout`, `git cm` para `git commit`, etc. ([GitHub][2])
* Tambi√©n se explican comandos autom√°ticos para flujos como `GitFlow`: `git flow init`, `git flow feature start`, etc. ([GitHub][2])

---

### üìã Lista ampliada con comandos muy usados en Git

La gu√≠a oficial de GitHub (‚ÄúGit cheat sheet‚Äù) incluye todos estos y otros comandos √∫tiles m√°s all√° del curso, como `git rm`, `git mv`, `git show`, `git log --stat`, `git diff --staged`, entre otros.  ([education.github.com][3])

Estos comandos son especialmente relevantes:

* `git rm <archivo>`: eliminar archivo del repositorio (git + sistema de archivos).
* `git mv <origen> <destino>`: renombrar o mover archivo (registra el cambio).
* `git diff --staged`: compara cambios que ya est√°n listos para ser comiteados.
* `git show <SHA>`: mostrar detalles de un commit espec√≠fico.
* `git log branchB..branchA`: ver commits que est√°n en una rama y no en otra.
* `git log --graph --decorate --oneline`: representaci√≥n visual del √°rbol de commits.
* `git config --global core.excludesfile`: definir archivos ignorados a nivel usuario.



-------------------------------------------------------------------------------------------------
esto lo escribi para hacer cambios en la rama nobordes para despues unirla a la rama main
-------------------------------------------------------------------------------------------------
